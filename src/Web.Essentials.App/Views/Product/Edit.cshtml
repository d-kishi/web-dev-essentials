@model Web.Essentials.App.ViewModels.ProductEditViewModel
@{
    ViewData["Title"] = $"商品編集 - {Model.Name}";
}

<!-- 商品編集画面 -->
<div class="page-header">
    <div class="page-title-section">
        <h1 class="page-title">商品編集</h1>
        <p class="page-description">商品「@Model.Name」の情報を編集します。</p>
    </div>
    <div class="page-actions">
        <a href="@Url.Action("Details", "Product", new { id = Model.Id })" class="btn btn-info">
            <span class="btn-icon">👁</span>
            詳細表示
        </a>
        <a href="@Url.Action("Index", "Product")" class="btn btn-secondary">
            <span class="btn-icon">←</span>
            商品一覧に戻る
        </a>
    </div>
</div>

<!-- パンくずナビ -->
<nav class="breadcrumb-nav" aria-label="パンくずナビ">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="@Url.Action("Index", "Home")">ホーム</a>
        </li>
        <li class="breadcrumb-item">
            <a href="@Url.Action("Index", "Product")">商品一覧</a>
        </li>
        <li class="breadcrumb-item">
            <a href="@Url.Action("Details", "Product", new { id = Model.Id })">@Model.Name</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            編集
        </li>
    </ol>
</nav>

<!-- 商品編集フォーム -->
<div class="form-container">
    <form asp-action="Edit" 
          method="post" 
          enctype="multipart/form-data" 
          id="productEditForm" 
          class="product-form"
          novalidate>
        
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)
        
        <!-- 編集履歴情報 -->
        <div class="form-section info-section">
            <h3 class="section-title">商品情報</h3>
            <div class="info-grid">
                <div class="info-item">
                    <label class="info-label">商品ID</label>
                    <span class="info-value">@Model.Id</span>
                </div>
                <div class="info-item">
                    <label class="info-label">作成日時</label>
                    <span class="info-value">@Model.CreatedAt.ToString("yyyy/MM/dd HH:mm:ss")</span>
                </div>
                <div class="info-item">
                    <label class="info-label">最終更新日時</label>
                    <span class="info-value">@Model.UpdatedAt.ToString("yyyy/MM/dd HH:mm:ss")</span>
                </div>
            </div>
        </div>
        
        <!-- 商品フォーム（部分ビュー） -->
        @Html.Partial("_ProductForm", Model)
        
        <!-- 変更履歴セクション -->
        <div class="form-section">
            <h3 class="section-title">変更履歴</h3>
            <div class="change-history">
                <div id="changeHistory" class="history-list">
                    <!-- 変更内容がここに表示される -->
                    <p class="no-changes">変更はありません</p>
                </div>
            </div>
        </div>
        
        <!-- フォーム操作ボタン -->
        <div class="form-actions">
            <div class="action-buttons">
                <button type="submit" class="btn btn-primary btn-large" id="saveButton">
                    <span class="btn-icon">💾</span>
                    変更を保存
                </button>
                <button type="button" class="btn btn-warning btn-large" onclick="showSaveAsNewModal()">
                    <span class="btn-icon">📋</span>
                    別商品として保存
                </button>
                <button type="button" class="btn btn-outline btn-large" onclick="previewProduct()">
                    <span class="btn-icon">👁</span>
                    プレビュー
                </button>
                <button type="button" class="btn btn-light btn-large" onclick="resetForm()">
                    <span class="btn-icon">↻</span>
                    変更を破棄
                </button>
            </div>
            
            <!-- 保存オプション -->
            <div class="save-options">
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="validateBeforeSave" class="checkbox-input" checked>
                        <span class="checkbox-custom"></span>
                        保存前にバリデーションを実行する
                    </label>
                </div>
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="keepEditingAfterSave" class="checkbox-input">
                        <span class="checkbox-custom"></span>
                        保存後も編集画面に留まる
                    </label>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- 別商品として保存モーダル -->
<div id="saveAsNewModal" class="modal-overlay" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">別商品として保存</h3>
                <button type="button" class="modal-close" onclick="closeSaveAsNewModal()">
                    <span>×</span>
                </button>
            </div>
            <div class="modal-body">
                <p>現在の編集内容を新しい商品として保存しますか？</p>
                <div class="form-group">
                    <label for="newProductName" class="form-label">新しい商品名</label>
                    <input type="text" 
                           id="newProductName" 
                           class="form-input" 
                           value="@Model.Name のコピー"
                           maxlength="100" />
                </div>
                <div class="warning-message">
                    <p><strong>注意:</strong> 元の商品は変更されません。新しい商品として別途作成されます。</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeSaveAsNewModal()">
                    キャンセル
                </button>
                <button type="button" class="btn btn-primary" onclick="saveAsNewProduct()">
                    新しい商品として保存
                </button>
            </div>
        </div>
    </div>
</div>

<!-- プレビューモーダル -->
<div id="productPreviewModal" class="modal-overlay preview-modal" style="display: none;">
    <div class="modal-dialog modal-large">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">商品プレビュー</h3>
                <button type="button" class="modal-close" onclick="closePreviewModal()">
                    <span>×</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="productPreviewContent" class="preview-content">
                    <!-- プレビュー内容がここに表示される -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closePreviewModal()">
                    閉じる
                </button>
                <button type="button" class="btn btn-primary" onclick="submitFromPreview()">
                    このまま保存する
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // 初期値を保存（変更検知用）
        let originalFormData = {};
        
        // フォーム初期化
        document.addEventListener('DOMContentLoaded', function() {
            initializeProductEditForm();
        });
        
        // 商品編集フォームの初期化
        function initializeProductEditForm() {
            // 初期値を保存
            originalFormData = collectFormData();
            
            // フォームバリデーションの設定
            setupFormValidation();
            
            // 画像アップロードの設定
            setupImageUpload();
            
            // 変更検知の設定
            setupChangeDetection();
            
            // ページ離脱警告の設定
            setupUnloadWarning();
        }
        
        // 変更検知の設定
        function setupChangeDetection() {
            const form = document.getElementById('productEditForm');
            const inputs = form.querySelectorAll('input, select, textarea');
            
            inputs.forEach(input => {
                input.addEventListener('input', detectChanges);
                input.addEventListener('change', detectChanges);
            });
        }
        
        // 変更検知
        function detectChanges() {
            const currentData = collectFormData();
            const changes = compareFormData(originalFormData, currentData);
            updateChangeHistory(changes);
        }
        
        // フォームデータ比較
        function compareFormData(original, current) {
            const changes = [];
            
            for (let key in current) {
                if (original[key] !== current[key]) {
                    changes.push({
                        field: key,
                        from: original[key],
                        to: current[key],
                        timestamp: new Date()
                    });
                }
            }
            
            return changes;
        }
        
        // 変更履歴更新
        function updateChangeHistory(changes) {
            const historyContainer = document.getElementById('changeHistory');
            
            if (changes.length === 0) {
                historyContainer.innerHTML = '<p class="no-changes">変更はありません</p>';
                return;
            }
            
            const historyHtml = changes.map(change => `
                <div class="history-item">
                    <div class="history-field">${getFieldDisplayName(change.field)}</div>
                    <div class="history-change">
                        <span class="change-from">${change.from || '(空)'}</span>
                        <span class="change-arrow">→</span>
                        <span class="change-to">${change.to || '(空)'}</span>
                    </div>
                    <div class="history-time">${change.timestamp.toLocaleTimeString()}</div>
                </div>
            `).join('');
            
            historyContainer.innerHTML = historyHtml;
        }
        
        // フィールド表示名取得
        function getFieldDisplayName(fieldName) {
            const fieldNames = {
                'Name': '商品名',
                'Description': '商品説明',
                'Price': '価格',
                'CategoryId': 'カテゴリ',
                'JanCode': 'JANコード'
            };
            
            return fieldNames[fieldName] || fieldName;
        }
        
        // フォーム送信前のバリデーション
        document.getElementById('productEditForm').addEventListener('submit', function(event) {
            const validateBeforeSave = document.getElementById('validateBeforeSave').checked;
            
            if (validateBeforeSave) {
                event.preventDefault();
                
                if (validateProductForm()) {
                    submitProductForm();
                }
            }
        });
        
        // 商品フォームのバリデーション
        function validateProductForm() {
            let isValid = true;
            const errors = [];
            
            // 商品名のバリデーション
            const nameInput = document.querySelector('input[name="Name"]');
            if (!nameInput.value.trim()) {
                errors.push('商品名は必須です');
                highlightFieldError(nameInput);
                isValid = false;
            }
            
            // 価格のバリデーション
            const priceInput = document.querySelector('input[name="Price"]');
            const price = parseInt(priceInput.value);
            if (isNaN(price) || price < 0) {
                errors.push('価格は0以上の数値で入力してください');
                highlightFieldError(priceInput);
                isValid = false;
            }
            
            // カテゴリのバリデーション
            const categorySelect = document.querySelector('select[name="CategoryId"]');
            if (!categorySelect.value) {
                errors.push('カテゴリは必須です');
                highlightFieldError(categorySelect);
                isValid = false;
            }
            
            // JANコードのバリデーション（入力されている場合）
            const janCodeInput = document.querySelector('input[name="JanCode"]');
            if (janCodeInput.value && !/^[0-9]{8,13}$/.test(janCodeInput.value)) {
                errors.push('JANコードは8〜13桁の数字で入力してください');
                highlightFieldError(janCodeInput);
                isValid = false;
            }
            
            // エラー表示
            if (!isValid) {
                showValidationErrors(errors);
            } else {
                hideValidationErrors();
            }
            
            return isValid;
        }
        
        // 商品フォーム送信
        async function submitProductForm() {
            try {
                showLoadingModal('商品を更新しています...');
                
                const formData = new FormData(document.getElementById('productEditForm'));
                
                const response = await fetch('/Product/Edit/@Model.Id', {
                    method: 'POST',
                    body: formData
                });
                
                hideLoadingModal();
                
                if (response.ok) {
                    const keepEditing = document.getElementById('keepEditingAfterSave').checked;
                    
                    showSuccess('商品が正常に更新されました');
                    
                    if (keepEditing) {
                        // 初期値を更新
                        originalFormData = collectFormData();
                        updateChangeHistory([]);
                    } else {
                        // 商品詳細に戻る
                        setTimeout(() => {
                            window.location.href = '/Product/Details/@Model.Id';
                        }, 1500);
                    }
                } else {
                    const errorText = await response.text();
                    showError('商品の更新に失敗しました: ' + errorText);
                }
            } catch (error) {
                hideLoadingModal();
                console.error('商品更新エラー:', error);
                showError('商品更新中にエラーが発生しました');
            }
        }
        
        // 別商品として保存モーダル表示
        function showSaveAsNewModal() {
            document.getElementById('saveAsNewModal').style.display = 'block';
        }
        
        // 別商品として保存モーダルを閉じる
        function closeSaveAsNewModal() {
            document.getElementById('saveAsNewModal').style.display = 'none';
        }
        
        // 別商品として保存実行
        async function saveAsNewProduct() {
            try {
                const newProductName = document.getElementById('newProductName').value;
                
                if (!newProductName.trim()) {
                    showError('新しい商品名を入力してください');
                    return;
                }
                
                showLoadingModal('新しい商品として保存しています...');
                
                const formData = new FormData(document.getElementById('productEditForm'));
                formData.set('Name', newProductName); // 商品名を更新
                formData.delete('Id'); // IDを削除（新規作成）
                
                const response = await fetch('/Product/Create', {
                    method: 'POST',
                    body: formData
                });
                
                hideLoadingModal();
                
                if (response.ok) {
                    showSuccess(`新しい商品「${newProductName}」として保存されました`);
                    closeSaveAsNewModal();
                    
                    // 商品一覧に戻る
                    setTimeout(() => {
                        window.location.href = '/Product';
                    }, 1500);
                } else {
                    const errorText = await response.text();
                    showError('新しい商品の保存に失敗しました: ' + errorText);
                }
            } catch (error) {
                hideLoadingModal();
                console.error('新しい商品保存エラー:', error);
                showError('新しい商品保存中にエラーが発生しました');
            }
        }
        
        // フォームリセット
        function resetForm() {
            if (confirm('変更内容を破棄して元の状態に戻しますか？')) {
                // 元の値に戻す
                for (let key in originalFormData) {
                    const input = document.querySelector(`[name="${key}"]`);
                    if (input) {
                        input.value = originalFormData[key];
                    }
                }
                
                updateChangeHistory([]);
                hideValidationErrors();
            }
        }
        
        // ページ離脱警告の設定
        function setupUnloadWarning() {
            window.addEventListener('beforeunload', function(event) {
                const currentData = collectFormData();
                const changes = compareFormData(originalFormData, currentData);
                
                if (changes.length > 0) {
                    event.preventDefault();
                    event.returnValue = '変更が保存されていません。ページを離れますか？';
                }
            });
        }
        
        // フォームデータ収集
        function collectFormData() {
            const form = document.getElementById('productEditForm');
            const formData = new FormData(form);
            const data = {};
            
            for (let [key, value] of formData.entries()) {
                if (key !== 'ImageFiles' && key !== 'NewImageFiles') { // ファイルは除外
                    data[key] = value;
                }
            }
            
            return data;
        }
    </script>
}