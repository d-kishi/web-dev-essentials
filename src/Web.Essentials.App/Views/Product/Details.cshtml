@model Web.Essentials.App.ViewModels.ProductDetailsViewModel
@{
    ViewData["Title"] = $"商品詳細 - {Model.Name}";
}

<!-- 商品詳細画面 -->
<div class="page-header">
    <div class="page-title-section">
        <h1 class="page-title">商品詳細</h1>
        <p class="page-description">商品「@Model.Name」の詳細情報を表示します。</p>
    </div>
    <div class="page-actions">
        <a href="@Url.Action("Edit", "Product", new { id = Model.Id })" class="btn btn-warning">
            <span class="btn-icon">✏</span>
            編集
        </a>
        <button type="button" 
                class="btn btn-danger" 
                onclick="confirmDeleteProduct(@Model.Id, '@Model.Name')">
            <span class="btn-icon">🗑</span>
            削除
        </button>
        <a href="@Url.Action("Index", "Product")" class="btn btn-secondary">
            <span class="btn-icon">←</span>
            商品一覧に戻る
        </a>
    </div>
</div>

<!-- パンくずナビ -->
<nav class="breadcrumb-nav" aria-label="パンくずナビ">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="@Url.Action("Index", "Home")">ホーム</a>
        </li>
        <li class="breadcrumb-item">
            <a href="@Url.Action("Index", "Product")">商品一覧</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            @Model.Name
        </li>
    </ol>
</nav>

<!-- 商品詳細コンテンツ -->
<div class="product-details-container">
    <div class="product-overview">
        <!-- 商品画像セクション -->
        <div class="product-images">
            @if (Model.Images?.Any() == true)
            {
                <div class="image-gallery">
                    <!-- メイン画像 -->
                    <div class="main-image-container">
                        @{
                            var mainImage = Model.Images.FirstOrDefault(img => img.IsMain) ?? Model.Images.First();
                        }
                        <img id="mainProductImage" 
                             src="@mainImage.ImagePath" 
                             alt="@mainImage.AltText" 
                             class="main-product-image" />
                        <div class="image-zoom-overlay" onclick="openImageModal('@mainImage.ImagePath', '@mainImage.AltText')">
                            <span class="zoom-icon">🔍</span>
                        </div>
                    </div>
                    
                    <!-- 画像サムネイル -->
                    @if (Model.Images.Count > 1)
                    {
                        <div class="image-thumbnails">
                            @foreach (var image in Model.Images.OrderBy(img => img.DisplayOrder))
                            {
                                <div class="thumbnail-item @(image.IsMain ? "active" : "")"
                                     onclick="changeMainImage('@image.ImagePath', '@image.AltText', this)">
                                    <img src="@image.ImagePath" 
                                         alt="@image.AltText" 
                                         class="thumbnail-image" />
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-image-container">
                    <img src="/images/no-image.png" alt="画像なし" class="no-image" />
                    <p class="no-image-text">画像がありません</p>
                </div>
            }
        </div>
        
        <!-- 商品基本情報 -->
        <div class="product-basic-info">
            <div class="product-header">
                <h2 class="product-name">@Model.Name</h2>
                <div class="product-status">
                    @switch (Model.Status)
                    {
                        case 0:
                            <span class="status-badge status-pending">販売開始前</span>
                            break;
                        case 1:
                            <span class="status-badge status-active">販売中</span>
                            break;
                        case 2:
                            <span class="status-badge status-discontinued">取扱終了</span>
                            break;
                    }
                </div>
            </div>
            
            <div class="product-price">
                <span class="price-label">価格</span>
                <span class="price-value">¥@Model.Price.ToString("N0")</span>
                <span class="price-tax">(税込)</span>
            </div>
            
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <div class="product-description">
                    <h3 class="description-title">商品説明</h3>
                    <div class="description-content">
                        @Html.Raw(Model.Description.Replace("\n", "<br />"))
                    </div>
                </div>
            }
            
            <!-- カテゴリ情報 -->
            @if (Model.Categories?.Any() == true)
            {
                <div class="product-categories">
                    <h3 class="categories-title">カテゴリ</h3>
                    <div class="categories-list">
                        @foreach (var category in Model.Categories)
                        {
                            <div class="category-item">
                                <a href="@Url.Action("Details", "Categories", new { id = category.Id })" 
                                   class="category-link">
                                    @category.FullPath
                                </a>
                            </div>
                        }
                    </div>
                </div>
            }
            
            <!-- アクションボタン -->
            <div class="product-actions">
                <div class="action-buttons">
                    <a href="@Url.Action("Edit", "Product", new { id = Model.Id })" 
                       class="btn btn-primary btn-large">
                        <span class="btn-icon">✏</span>
                        この商品を編集
                    </a>
                    <button type="button" 
                            class="btn btn-outline btn-large" 
                            onclick="duplicateProduct(@Model.Id)">
                        <span class="btn-icon">📋</span>
                        複製して新規作成
                    </button>
                    <button type="button" 
                            class="btn btn-light btn-large" 
                            onclick="shareProduct()">
                        <span class="btn-icon">📤</span>
                        共有
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- 商品詳細情報 -->
    <div class="product-details-info">
        <div class="details-tabs">
            <div class="tab-navigation">
                <button class="tab-button active" onclick="showTab('specifications')" data-tab="specifications">
                    商品仕様
                </button>
                <button class="tab-button" onclick="showTab('metadata')" data-tab="metadata">
                    管理情報
                </button>
                <button class="tab-button" onclick="showTab('history')" data-tab="history">
                    変更履歴
                </button>
            </div>
            
            <!-- 商品仕様タブ -->
            <div id="specificationsTab" class="tab-content active">
                <div class="specifications-grid">
                    <div class="spec-item">
                        <label class="spec-label">商品ID</label>
                        <span class="spec-value">@Model.Id</span>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(Model.JanCode))
                    {
                        <div class="spec-item">
                            <label class="spec-label">JANコード</label>
                            <span class="spec-value">
                                <code class="jan-code">@Model.JanCode</code>
                                <button type="button" 
                                        class="copy-button" 
                                        onclick="copyToClipboard('@Model.JanCode')"
                                        title="クリップボードにコピー">
                                    📋
                                </button>
                            </span>
                        </div>
                    }
                    
                    <div class="spec-item">
                        <label class="spec-label">商品ステータス</label>
                        <span class="spec-value">
                            @switch (Model.Status)
                            {
                                case 0:
                                    <span class="status-text">販売開始前</span>
                                    break;
                                case 1:
                                    <span class="status-text">販売中</span>
                                    break;
                                case 2:
                                    <span class="status-text">取扱終了</span>
                                    break;
                            }
                        </span>
                    </div>
                    
                    @if (Model.Images?.Any() == true)
                    {
                        <div class="spec-item">
                            <label class="spec-label">画像数</label>
                            <span class="spec-value">@Model.Images.Count 枚</span>
                        </div>
                    }
                </div>
            </div>
            
            <!-- 管理情報タブ -->
            <div id="metadataTab" class="tab-content">
                <div class="metadata-grid">
                    <div class="metadata-item">
                        <label class="metadata-label">作成日時</label>
                        <span class="metadata-value">
                            <time datetime="@Model.CreatedAt.ToString("yyyy-MM-ddTHH:mm:ss")">
                                @Model.CreatedAt.ToString("yyyy年MM月dd日 HH:mm:ss")
                            </time>
                        </span>
                    </div>
                    
                    <div class="metadata-item">
                        <label class="metadata-label">最終更新日時</label>
                        <span class="metadata-value">
                            <time datetime="@Model.UpdatedAt.ToString("yyyy-MM-ddTHH:mm:ss")">
                                @Model.UpdatedAt.ToString("yyyy年MM月dd日 HH:mm:ss")
                            </time>
                        </span>
                    </div>
                    
                    @if (Model.CreatedAt != Model.UpdatedAt)
                    {
                        <div class="metadata-item">
                            <label class="metadata-label">最終更新からの経過時間</label>
                            <span class="metadata-value">
                                @{
                                    var timeDiff = DateTime.Now - Model.UpdatedAt;
                                    var timeDiffText = timeDiff.Days > 0 ? $"{timeDiff.Days}日前" :
                                                      timeDiff.Hours > 0 ? $"{timeDiff.Hours}時間前" :
                                                      timeDiff.Minutes > 0 ? $"{timeDiff.Minutes}分前" : "1分以内";
                                }
                                @timeDiffText
                            </span>
                        </div>
                    }
                </div>
            </div>
            
            <!-- 変更履歴タブ -->
            <div id="historyTab" class="tab-content">
                <div class="history-container">
                    <div id="changeHistoryContent" class="history-content">
                        <p class="loading-text">変更履歴を読み込み中...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 画像拡大モーダル -->
<div id="imageModal" class="modal-overlay image-modal" style="display: none;" onclick="closeImageModal()">
    <div class="modal-dialog modal-large">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="imageModalTitle">商品画像</h3>
                <button type="button" class="modal-close" onclick="closeImageModal()">
                    <span>×</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="image-modal-container">
                    <img id="modalImage" src="" alt="" class="modal-image" />
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ページ読み込み時の初期化
        document.addEventListener('DOMContentLoaded', function() {
            initializeProductDetails();
        });
        
        // 商品詳細の初期化
        function initializeProductDetails() {
            // タブ機能の初期化
            setupTabs();
            
            // 変更履歴の読み込み
            loadChangeHistory();
            
            // 画像ギャラリーの初期化
            setupImageGallery();
        }
        
        // タブ表示切り替え
        function showTab(tabName) {
            // すべてのタブボタンとコンテンツを非アクティブに
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // 選択されたタブをアクティブに
            document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
            document.getElementById(tabName + 'Tab').classList.add('active');
            
            // 変更履歴タブの場合は履歴を読み込み
            if (tabName === 'history') {
                loadChangeHistory();
            }
        }
        
        // メイン画像変更
        function changeMainImage(imagePath, altText, thumbnailElement) {
            const mainImage = document.getElementById('mainProductImage');
            mainImage.src = imagePath;
            mainImage.alt = altText;
            
            // サムネイルのアクティブ状態を更新
            document.querySelectorAll('.thumbnail-item').forEach(item => item.classList.remove('active'));
            thumbnailElement.classList.add('active');
        }
        
        // 画像拡大モーダル表示
        function openImageModal(imagePath, altText) {
            const modal = document.getElementById('imageModal');
            const modalImage = document.getElementById('modalImage');
            const modalTitle = document.getElementById('imageModalTitle');
            
            modalImage.src = imagePath;
            modalImage.alt = altText;
            modalTitle.textContent = altText || '商品画像';
            
            modal.style.display = 'block';
            document.body.style.overflow = 'hidden';
        }
        
        // 画像拡大モーダル閉じる
        function closeImageModal() {
            const modal = document.getElementById('imageModal');
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
        
        // 商品削除確認
        function confirmDeleteProduct(productId, productName) {
            showConfirmationModal(
                '商品削除の確認',
                `商品「${productName}」を削除しますか？`,
                '削除すると元に戻せません。関連する画像や情報もすべて削除されます。',
                '削除',
                () => deleteProduct(productId)
            );
        }
        
        // 商品削除実行
        async function deleteProduct(productId) {
            try {
                showLoadingModal('商品を削除しています...');
                
                const response = await fetch(`/Product/Delete/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    }
                });
                
                hideLoadingModal();
                
                if (response.ok) {
                    showSuccess('商品が正常に削除されました');
                    
                    // 商品一覧に戻る
                    setTimeout(() => {
                        window.location.href = '/Product';
                    }, 1500);
                } else {
                    const errorText = await response.text();
                    showError('商品の削除に失敗しました: ' + errorText);
                }
            } catch (error) {
                hideLoadingModal();
                console.error('商品削除エラー:', error);
                showError('商品削除中にエラーが発生しました');
            }
        }
        
        // 商品複製
        async function duplicateProduct(productId) {
            try {
                showLoadingModal('商品を複製しています...');
                
                const response = await fetch(`/Product/Duplicate/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    }
                });
                
                hideLoadingModal();
                
                if (response.ok) {
                    const result = await response.json();
                    showSuccess('商品が複製されました');
                    
                    // 複製された商品の編集画面に移動
                    setTimeout(() => {
                        window.location.href = `/Product/Edit/${result.newProductId}`;
                    }, 1500);
                } else {
                    const errorText = await response.text();
                    showError('商品の複製に失敗しました: ' + errorText);
                }
            } catch (error) {
                hideLoadingModal();
                console.error('商品複製エラー:', error);
                showError('商品複製中にエラーが発生しました');
            }
        }
        
        // 商品共有
        function shareProduct() {
            const url = window.location.href;
            const productName = '@Model.Name';
            const shareText = `商品「${productName}」の詳細をご覧ください`;
            
            if (navigator.share) {
                // ネイティブ共有API使用
                navigator.share({
                    title: productName,
                    text: shareText,
                    url: url
                });
            } else {
                // フォールバック: クリップボードにコピー
                copyToClipboard(url);
                showSuccess('商品URLをクリップボードにコピーしました');
            }
        }
        
        // クリップボードにコピー
        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
                showSuccess('クリップボードにコピーしました');
            } catch (error) {
                console.error('クリップボードコピーエラー:', error);
                
                // フォールバック
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                
                showSuccess('クリップボードにコピーしました');
            }
        }
        
        // 変更履歴読み込み
        async function loadChangeHistory() {
            try {
                const historyContent = document.getElementById('changeHistoryContent');
                historyContent.innerHTML = '<p class="loading-text">変更履歴を読み込み中...</p>';
                
                const response = await fetch(`/Product/GetChangeHistory/@Model.Id`);
                
                if (response.ok) {
                    const history = await response.json();
                    renderChangeHistory(history);
                } else {
                    historyContent.innerHTML = '<p class="error-text">変更履歴の読み込みに失敗しました</p>';
                }
            } catch (error) {
                console.error('変更履歴読み込みエラー:', error);
                document.getElementById('changeHistoryContent').innerHTML = 
                    '<p class="error-text">変更履歴の読み込み中にエラーが発生しました</p>';
            }
        }
        
        // 変更履歴表示
        function renderChangeHistory(history) {
            const historyContent = document.getElementById('changeHistoryContent');
            
            if (!history || history.length === 0) {
                historyContent.innerHTML = '<p class="no-data-text">変更履歴はありません</p>';
                return;
            }
            
            const historyHtml = history.map(item => `
                <div class="history-item">
                    <div class="history-header">
                        <span class="history-date">${new Date(item.changedAt).toLocaleString()}</span>
                        <span class="history-type">${item.changeType}</span>
                    </div>
                    <div class="history-details">
                        ${item.changes.map(change => `
                            <div class="history-change">
                                <span class="change-field">${change.fieldName}</span>
                                <span class="change-from">${change.oldValue || '(空)'}</span>
                                <span class="change-arrow">→</span>
                                <span class="change-to">${change.newValue || '(空)'}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `).join('');
            
            historyContent.innerHTML = historyHtml;
        }
        
        // ESCキーで画像モーダルを閉じる
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeImageModal();
            }
        });
    </script>
}