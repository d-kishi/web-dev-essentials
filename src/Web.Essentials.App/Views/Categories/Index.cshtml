@model Web.Essentials.App.ViewModels.CategoryIndexViewModel
@{
    ViewData["Title"] = "カテゴリ一覧";
    // 検索フォーム用のViewBagデータ設定
    ViewBag.SearchKeyword = Model?.SearchKeyword ?? "";
    ViewBag.ShowCategoryFilter = false; // カテゴリ管理画面ではカテゴリフィルタは不要
}

<!-- カテゴリ一覧画面 -->
<div class="page-header">
    <div class="page-title-section">
        <h1 class="page-title">カテゴリ一覧</h1>
        <p class="page-description">登録されているカテゴリの一覧を階層構造で表示します。検索や並び替えが可能です。</p>
    </div>
    <div class="page-actions">
        <a asp-action="Create" asp-controller="Categories" class="btn btn-primary">
            <span class="btn-icon">➕</span>
            新規カテゴリ登録
        </a>
    </div>
</div>

<!-- 検索フォーム -->
<partial name="_SearchForm" />

<!-- カテゴリ一覧コンテナ -->
<div class="category-list-container">
    <!-- ローディング表示 -->
    <div id="categoryListLoading" class="loading-container" style="display: none;">
        <div class="loading-spinner">
            <div class="spinner"></div>
            <p>カテゴリを読み込み中...</p>
        </div>
    </div>
    
    <!-- 表示オプション -->
    <div class="list-controls" style="display: none;">
        <!-- 階層表示では展開/閉じる機能は使用しません -->
    </div>
    
    <!-- カテゴリ一覧コンテンツ -->
    <div id="categoryListContent" class="list-content">
        <!-- 階層表示 -->
        <div id="treeView" class="tree-container">
            <div id="categoryTree" class="category-tree">
                <!-- 初期表示、検索、リセット すべてAPIから取得して同じ処理フローで表示 -->
            </div>
        </div>
    </div>
    
    <!-- ページング -->
    <div id="paginationContainer" class="pagination-wrapper">
        @if (Model?.Paging != null)
        {
            <partial name="_Pagination" model="Model.Paging" />
        }
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/category-hierarchy.css" asp-append-version="true" />
}

@section Scripts {
    <script src="~/js/categories-index.js" asp-append-version="true" defer></script>
    <script defer>
        // サーバーサイドデータを JavaScriptに渡す
        document.addEventListener('DOMContentLoaded', function() {
            setInitialSearchParams({
                searchKeyword: '@Model?.SearchKeyword',
                level: null,
                parentId: null,
                page: @(Model?.CurrentPage ?? 1),
                pageSize: @(Model?.PageSize ?? 20),
                sortBy: null
            });
        });
    </script>
}