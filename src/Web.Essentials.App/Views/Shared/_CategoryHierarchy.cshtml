@model IEnumerable<dynamic>
<!-- „Ç´„ÉÜ„Ç¥„É™ÈöéÂ±§Ë°®Á§∫ÈÉ®ÂàÜ„Éì„É•„Éº -->
<!-- „ÉÑ„É™„ÉºÊßãÈÄ†„Åß„ÅÆÈöéÂ±§Ë°®Á§∫ -->
<!-- Index/DetailsÁîªÈù¢„ÅßÂÖ±ÈÄöÂà©Áî® -->

@{
    var categories = Model ?? new List<dynamic>();
    var showActions = ViewBag.ShowActions as bool? ?? true;
    var isSelectable = ViewBag.IsSelectable as bool? ?? false;
    var selectedId = ViewBag.SelectedId as int?;
    var showProductCount = ViewBag.ShowProductCount as bool? ?? true;
    var expandAll = ViewBag.ExpandAll as bool? ?? false;
}

<div class="category-hierarchy-container">
    @if (categories.Any())
    {
        <div class="category-tree">
            @foreach (var category in categories.OrderBy(c => c.SortOrder ?? 0))
            {
                @Html.Partial("_CategoryTreeNode", category, new ViewDataDictionary(ViewData) 
                {
                    {"ShowActions", showActions},
                    {"IsSelectable", isSelectable},
                    {"SelectedId", selectedId},
                    {"ShowProductCount", showProductCount},
                    {"ExpandAll", expandAll}
                })
            }
        </div>
    }
    else
    {
        <div class="no-categories-message">
            <div class="no-data-icon">üè∑Ô∏è</div>
            <p>„Ç´„ÉÜ„Ç¥„É™„ÅåÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì</p>
        </div>
    }
</div>

<!-- „Ç´„ÉÜ„Ç¥„É™„ÉÑ„É™„Éº„Éé„Éº„ÉâÈÉ®ÂàÜ„Éì„É•„Éº -->
@helper CategoryTreeNode(dynamic category)
{
    var showActions = ViewBag.ShowActions as bool? ?? true;
    var isSelectable = ViewBag.IsSelectable as bool? ?? false;
    var selectedId = ViewBag.SelectedId as int?;
    var showProductCount = ViewBag.ShowProductCount as bool? ?? true;
    var expandAll = ViewBag.ExpandAll as bool? ?? false;
    
    var hasChildren = category.ChildCategories?.Any() == true;
    var isSelected = isSelectable && selectedId == category.Id;
    var nodeId = $"tree-node-{category.Id}";
    
    <div class="tree-item @(hasChildren ? "expandable" : "") @(expandAll ? "" : "collapsed") @(isSelected ? "selected" : "")" 
         data-category-id="@category.Id" 
         data-level="@category.Level"
         id="@nodeId">
        
        <div class="tree-node">
            <!-- Â±ïÈñã/Á∏ÆÂ∞è„Éú„Çø„É≥ -->
            @if (hasChildren)
            {
                <button type="button" 
                        class="tree-toggle" 
                        onclick="toggleTreeNode('@nodeId')"
                        title="@(expandAll ? "Á∏ÆÂ∞è" : "Â±ïÈñã")">
                    @(expandAll ? "‚ñº" : "‚ñ∂")
                </button>
            }
            else
            {
                <span class="tree-spacer">„ÄÄ</span>
            }
            
            <!-- „Ç´„ÉÜ„Ç¥„É™„Ç¢„Ç§„Ç≥„É≥ -->
            <span class="tree-icon">
                @if (category.Level == 0)
                {
                    <span class="icon-root">üìÅ</span>
                }
                else if (hasChildren)
                {
                    <span class="icon-branch">üìÇ</span>
                }
                else
                {
                    <span class="icon-leaf">üè∑Ô∏è</span>
                }
            </span>
            
            <!-- „Ç´„ÉÜ„Ç¥„É™Âêç -->
            <div class="tree-content">
                @if (isSelectable)
                {
                    <button type="button" 
                            class="tree-label selectable @(isSelected ? "selected" : "")"
                            onclick="selectCategory(@category.Id, '@category.Name', '@category.FullPath')"
                            title="„Åì„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÇíÈÅ∏Êäû">
                        <span class="category-name">@category.Name</span>
                    </button>
                }
                else
                {
                    <div class="tree-label">
                        <span class="category-name">@category.Name</span>
                    </div>
                }
                
                <!-- „Ç´„ÉÜ„Ç¥„É™ÊÉÖÂ†± -->
                <div class="tree-meta">
                    <!-- ÈöéÂ±§„É¨„Éô„É´ -->
                    <span class="level-indicator level-@category.Level">L@category.Level</span>
                    
                    <!-- ÂïÜÂìÅÊï∞ -->
                    @if (showProductCount)
                    {
                        <span class="product-count" title="Èñ¢ÈÄ£ÂïÜÂìÅÊï∞">
                            üì¶ @(category.ProductCount ?? 0)
                        </span>
                    }
                    
                    <!-- Â≠ê„Ç´„ÉÜ„Ç¥„É™Êï∞ -->
                    @if (hasChildren)
                    {
                        <span class="children-count" title="Â≠ê„Ç´„ÉÜ„Ç¥„É™Êï∞">
                            üè∑Ô∏è @category.ChildCategories.Count
                        </span>
                    }
                </div>
                
                <!-- „Ç´„ÉÜ„Ç¥„É™Ë™¨ÊòéÔºàÊäò„Çä„Åü„Åü„ÅøÂèØËÉΩÔºâ -->
                @if (!string.IsNullOrEmpty(category.Description))
                {
                    <div class="tree-description" id="desc-@category.Id" style="display: none;">
                        <small>@category.Description</small>
                    </div>
                    <button type="button" 
                            class="description-toggle" 
                            onclick="toggleDescription('@category.Id')"
                            title="Ë™¨Êòé„ÇíË°®Á§∫/ÈùûË°®Á§∫">
                        üí¨
                    </button>
                }
                
                <!-- „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ -->
                @if (showActions)
                {
                    <div class="tree-actions">
                        <a href="@Url.Action("Details", "Categories", new { id = category.Id })" 
                           class="tree-action-btn detail-btn" 
                           title="Ë©≥Á¥∞Ë°®Á§∫">
                            üëÅÔ∏è
                        </a>
                        <a href="@Url.Action("Edit", "Categories", new { id = category.Id })" 
                           class="tree-action-btn edit-btn" 
                           title="Á∑®ÈõÜ">
                            ‚úèÔ∏è
                        </a>
                        <a href="@Url.Action("Create", "Categories", new { parentId = category.Id })" 
                           class="tree-action-btn add-btn" 
                           title="Â≠ê„Ç´„ÉÜ„Ç¥„É™„ÇíËøΩÂä†">
                            ‚ûï
                        </a>
                        <button type="button" 
                                class="tree-action-btn delete-btn" 
                                onclick="confirmDeleteCategory(@category.Id, '@category.Name', @(category.ProductCount ?? 0), @(hasChildren ? "true" : "false"))"
                                title="ÂâäÈô§"
                                @((category.ProductCount ?? 0) > 0 || hasChildren ? "disabled" : "")>
                            üóëÔ∏è
                        </button>
                    </div>
                }
            </div>
        </div>
        
        <!-- Â≠ê„Ç´„ÉÜ„Ç¥„É™ -->
        @if (hasChildren)
        {
            <div class="tree-children" style="display: @(expandAll ? "block" : "none");">
                @foreach (var child in category.ChildCategories.OrderBy(c => c.SortOrder ?? 0))
                {
                    @CategoryTreeNode(child)
                }
            </div>
        }
    </div>
}

<script>
    // „Ç´„ÉÜ„Ç¥„É™ÈöéÂ±§„ÅÆÂàùÊúüÂåñ
    function initializeCategoryHierarchy() {
        setupTreeInteractions();
        setupKeyboardNavigation();
    }
    
    // „ÉÑ„É™„ÉºÊìç‰Ωú„ÅÆË®≠ÂÆö
    function setupTreeInteractions() {
        // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Å´„Çà„Çã‰∏¶„Å≥Êõø„ÅàÔºàÁÆ°ÁêÜÁîªÈù¢„ÅÆÂ†¥ÂêàÔºâ
        if (@Json.Serialize(showActions)) {
            setupTreeSorting();
        }
    }
    
    // „ÉÑ„É™„Éº„Éé„Éº„ÉâÂ±ïÈñã/Á∏ÆÂ∞è
    function toggleTreeNode(nodeId) {
        const node = document.getElementById(nodeId);
        const toggle = node.querySelector('.tree-toggle');
        const children = node.querySelector('.tree-children');
        
        if (!children) return;
        
        const isExpanded = children.style.display === 'block';
        
        if (isExpanded) {
            // Á∏ÆÂ∞è
            children.style.display = 'none';
            toggle.textContent = '‚ñ∂';
            toggle.title = 'Â±ïÈñã';
            node.classList.add('collapsed');
        } else {
            // Â±ïÈñã
            children.style.display = 'block';
            toggle.textContent = '‚ñº';
            toggle.title = 'Á∏ÆÂ∞è';
            node.classList.remove('collapsed');
        }
        
        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂäπÊûú
        children.style.maxHeight = isExpanded ? '0' : children.scrollHeight + 'px';
    }
    
    // „Åô„Åπ„Å¶Â±ïÈñã
    function expandAllNodes() {
        document.querySelectorAll('.tree-item.expandable').forEach(node => {
            const children = node.querySelector('.tree-children');
            const toggle = node.querySelector('.tree-toggle');
            
            if (children && children.style.display !== 'block') {
                children.style.display = 'block';
                toggle.textContent = '‚ñº';
                toggle.title = 'Á∏ÆÂ∞è';
                node.classList.remove('collapsed');
            }
        });
    }
    
    // „Åô„Åπ„Å¶Á∏ÆÂ∞è
    function collapseAllNodes() {
        document.querySelectorAll('.tree-item.expandable').forEach(node => {
            const children = node.querySelector('.tree-children');
            const toggle = node.querySelector('.tree-toggle');
            
            if (children && children.style.display === 'block') {
                children.style.display = 'none';
                toggle.textContent = '‚ñ∂';
                toggle.title = 'Â±ïÈñã';
                node.classList.add('collapsed');
            }
        });
    }
    
    // „Ç´„ÉÜ„Ç¥„É™ÈÅ∏ÊäûÔºàÈÅ∏ÊäûÂèØËÉΩ„É¢„Éº„Éâ„ÅÆÂ†¥ÂêàÔºâ
    function selectCategory(categoryId, categoryName, fullPath) {
        @if (isSelectable)
        {
            <text>
            // ‰ªñ„ÅÆÈÅ∏Êäû„ÇíËß£Èô§
            document.querySelectorAll('.tree-label.selected').forEach(label => {
                label.classList.remove('selected');
            });
            
            // Êñ∞„Åó„ÅÑÈÅ∏Êäû„ÇíË®≠ÂÆö
            event.target.closest('.tree-label').classList.add('selected');
            
            // ÈÅ∏ÊäûÂÄ§„ÇíÈö†„Åó„Éï„Ç£„Éº„É´„Éâ„Å´Ë®≠ÂÆö
            const hiddenField = document.querySelector('input[type="hidden"][name*="CategoryId"]');
            if (hiddenField) {
                hiddenField.value = categoryId;
            }
            
            // ÈÅ∏Êäû„Ç§„Éô„É≥„Éà„ÇíÁô∫ÁÅ´
            const selectEvent = new CustomEvent('categorySelected', {
                detail: {
                    id: categoryId,
                    name: categoryName,
                    fullPath: fullPath
                }
            });
            document.dispatchEvent(selectEvent);
            </text>
        }
    }
    
    // Ë™¨ÊòéË°®Á§∫Âàá„ÇäÊõø„Åà
    function toggleDescription(categoryId) {
        const description = document.getElementById(`desc-${categoryId}`);
        const isVisible = description.style.display === 'block';
        
        description.style.display = isVisible ? 'none' : 'block';
        
        // „Éú„Çø„É≥„ÅÆÁä∂ÊÖãÊõ¥Êñ∞
        const button = event.target;
        button.title = isVisible ? 'Ë™¨Êòé„ÇíË°®Á§∫' : 'Ë™¨Êòé„ÇíÈùûË°®Á§∫';
        button.style.opacity = isVisible ? '0.7' : '1';
    }
    
    // „Ç≠„Éº„Éú„Éº„Éâ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥
    function setupKeyboardNavigation() {
        document.addEventListener('keydown', function(event) {
            const focusedElement = document.activeElement;
            
            if (focusedElement.classList.contains('tree-label')) {
                const currentNode = focusedElement.closest('.tree-item');
                
                switch (event.key) {
                    case 'ArrowUp':
                        event.preventDefault();
                        navigateToPrevious(currentNode);
                        break;
                    case 'ArrowDown':
                        event.preventDefault();
                        navigateToNext(currentNode);
                        break;
                    case 'ArrowRight':
                        event.preventDefault();
                        expandNode(currentNode);
                        break;
                    case 'ArrowLeft':
                        event.preventDefault();
                        collapseNode(currentNode);
                        break;
                    case 'Enter':
                    case ' ':
                        event.preventDefault();
                        if (@Json.Serialize(isSelectable)) {
                            focusedElement.click();
                        }
                        break;
                }
            }
        });
    }
    
    // Ââç„ÅÆ„Éé„Éº„Éâ„Å´ÁßªÂãï
    function navigateToPrevious(currentNode) {
        const allLabels = Array.from(document.querySelectorAll('.tree-label'));
        const currentLabel = currentNode.querySelector('.tree-label');
        const currentIndex = allLabels.indexOf(currentLabel);
        
        if (currentIndex > 0) {
            allLabels[currentIndex - 1].focus();
        }
    }
    
    // Ê¨°„ÅÆ„Éé„Éº„Éâ„Å´ÁßªÂãï
    function navigateToNext(currentNode) {
        const allLabels = Array.from(document.querySelectorAll('.tree-label'));
        const currentLabel = currentNode.querySelector('.tree-label');
        const currentIndex = allLabels.indexOf(currentLabel);
        
        if (currentIndex < allLabels.length - 1) {
            allLabels[currentIndex + 1].focus();
        }
    }
    
    // „Éé„Éº„ÉâÂ±ïÈñã
    function expandNode(node) {
        const toggle = node.querySelector('.tree-toggle');
        const children = node.querySelector('.tree-children');
        
        if (toggle && children && children.style.display !== 'block') {
            toggle.click();
        }
    }
    
    // „Éé„Éº„ÉâÁ∏ÆÂ∞è
    function collapseNode(node) {
        const toggle = node.querySelector('.tree-toggle');
        const children = node.querySelector('.tree-children');
        
        if (toggle && children && children.style.display === 'block') {
            toggle.click();
        }
    }
    
    // „ÉÑ„É™„Éº„ÇΩ„Éº„ÉàÊ©üËÉΩÔºàÁÆ°ÁêÜÁîªÈù¢Áî®Ôºâ
    function setupTreeSorting() {
        // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Å´„Çà„Çã‰∏¶„Å≥Êõø„ÅàÂÆüË£Ö
        // ÂÆüË£Ö„ÅØË§áÈõë„Å´„Å™„Çã„Åü„ÇÅ„ÄÅÂü∫Êú¨Ê©üËÉΩ„ÅÆ„Åø
    }
    
    // „Ç´„ÉÜ„Ç¥„É™ÂâäÈô§Á¢∫Ë™ç
    function confirmDeleteCategory(categoryId, categoryName, productCount, hasChildren) {
        if (productCount > 0 || hasChildren) {
            let message = '';
            if (productCount > 0 && hasChildren) {
                message = `„Ç´„ÉÜ„Ç¥„É™„Äå${categoryName}„Äç„Å´„ÅØ${productCount}ÂÄã„ÅÆÂïÜÂìÅ„Å®Â≠ê„Ç´„ÉÜ„Ç¥„É™„ÅåÂ≠òÂú®„Åô„Çã„Åü„ÇÅÂâäÈô§„Åß„Åç„Åæ„Åõ„Çì„ÄÇ`;
            } else if (productCount > 0) {
                message = `„Ç´„ÉÜ„Ç¥„É™„Äå${categoryName}„Äç„Å´„ÅØ${productCount}ÂÄã„ÅÆÂïÜÂìÅ„ÅåÂ≠òÂú®„Åô„Çã„Åü„ÇÅÂâäÈô§„Åß„Åç„Åæ„Åõ„Çì„ÄÇ`;
            } else if (hasChildren) {
                message = `„Ç´„ÉÜ„Ç¥„É™„Äå${categoryName}„Äç„Å´„ÅØÂ≠ê„Ç´„ÉÜ„Ç¥„É™„ÅåÂ≠òÂú®„Åô„Çã„Åü„ÇÅÂâäÈô§„Åß„Åç„Åæ„Åõ„Çì„ÄÇ`;
            }
            
            showError(message);
            return;
        }
        
        if (confirm(`„Ç´„ÉÜ„Ç¥„É™„Äå${categoryName}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü\n\n„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ`)) {
            // ÂâäÈô§Âá¶ÁêÜ„ÇíÂÆüË°å
            deleteCategory(categoryId);
        }
    }
    
    // „Ç´„ÉÜ„Ç¥„É™ÂâäÈô§ÂÆüË°å
    async function deleteCategory(categoryId) {
        try {
            const response = await fetch(`/Categories/Delete/${categoryId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                }
            });
            
            if (response.ok) {
                showSuccess('„Ç´„ÉÜ„Ç¥„É™„ÅåÊ≠£Â∏∏„Å´ÂâäÈô§„Åï„Çå„Åæ„Åó„Åü');
                
                // „Éé„Éº„Éâ„ÇíÁîªÈù¢„Åã„ÇâÂâäÈô§
                const node = document.querySelector(`[data-category-id="${categoryId}"]`);
                if (node) {
                    node.remove();
                }
            } else {
                const errorText = await response.text();
                showError('„Ç´„ÉÜ„Ç¥„É™„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + errorText);
            }
        } catch (error) {
            console.error('„Ç´„ÉÜ„Ç¥„É™ÂâäÈô§„Ç®„É©„Éº:', error);
            showError('„Ç´„ÉÜ„Ç¥„É™ÂâäÈô§‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
        }
    }
    
    // ÂàùÊúüÂåñÔºà„Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´Âëº„Å≥Âá∫„ÅóÔºâ
    document.addEventListener('DOMContentLoaded', function() {
        initializeCategoryHierarchy();
    });
</script>

<style>
    /* „Ç´„ÉÜ„Ç¥„É™ÈöéÂ±§Ë°®Á§∫„ÅÆ„Çπ„Çø„Ç§„É´ */
    .category-hierarchy-container {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    
    .category-tree {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background: white;
        max-height: 500px;
        overflow-y: auto;
    }
    
    .tree-item {
        border-bottom: 1px solid #f0f0f0;
        transition: all 0.3s ease;
    }
    
    .tree-item:last-child {
        border-bottom: none;
    }
    
    .tree-item:hover {
        background-color: #f8f9fa;
    }
    
    .tree-item.selected {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
    }
    
    .tree-node {
        display: flex;
        align-items: center;
        padding: 0.75rem;
        gap: 0.5rem;
        position: relative;
    }
    
    .tree-toggle {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 0.9rem;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: background-color 0.2s ease;
    }
    
    .tree-toggle:hover {
        background-color: #e0e0e0;
    }
    
    .tree-spacer {
        width: 20px;
        height: 20px;
        display: inline-block;
    }
    
    .tree-icon {
        font-size: 1.1rem;
        line-height: 1;
    }
    
    .icon-root {
        color: #ff9800;
    }
    
    .icon-branch {
        color: #2196f3;
    }
    
    .icon-leaf {
        color: #4caf50;
    }
    
    .tree-content {
        flex: 1;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        min-width: 0;
    }
    
    .tree-label {
        flex: 1;
        min-width: 0;
        cursor: default;
        border-radius: 4px;
        padding: 0.25rem 0.5rem;
        transition: all 0.2s ease;
    }
    
    .tree-label.selectable {
        cursor: pointer;
        border: none;
        background: none;
        text-align: left;
        font: inherit;
    }
    
    .tree-label.selectable:hover {
        background-color: #e3f2fd;
    }
    
    .tree-label.selected {
        background-color: #2196f3;
        color: white;
    }
    
    .category-name {
        font-weight: 500;
        color: #333;
        word-break: break-word;
    }
    
    .tree-label.selected .category-name {
        color: white;
    }
    
    .tree-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.8rem;
        color: #666;
        flex-shrink: 0;
    }
    
    .level-indicator {
        background: #f0f0f0;
        color: #666;
        padding: 0.125rem 0.375rem;
        border-radius: 10px;
        font-size: 0.7rem;
        font-weight: 500;
    }
    
    .level-indicator.level-0 {
        background: #ffecb3;
        color: #f57c00;
    }
    
    .level-indicator.level-1 {
        background: #e1f5fe;
        color: #0277bd;
    }
    
    .level-indicator.level-2 {
        background: #e8f5e8;
        color: #2e7d32;
    }
    
    .product-count,
    .children-count {
        display: flex;
        align-items: center;
        gap: 0.125rem;
        font-size: 0.75rem;
    }
    
    .tree-description {
        margin-top: 0.5rem;
        padding: 0.5rem;
        background: #f8f9fa;
        border-radius: 4px;
        border-left: 3px solid #dee2e6;
        font-size: 0.85rem;
        color: #666;
        line-height: 1.4;
    }
    
    .description-toggle {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 0.9rem;
        opacity: 0.7;
        transition: opacity 0.2s ease;
        padding: 0;
        margin-left: 0.25rem;
    }
    
    .description-toggle:hover {
        opacity: 1;
    }
    
    .tree-actions {
        display: flex;
        gap: 0.25rem;
        opacity: 0;
        transition: opacity 0.2s ease;
    }
    
    .tree-item:hover .tree-actions {
        opacity: 1;
    }
    
    .tree-action-btn {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 0.9rem;
        padding: 0.25rem;
        border-radius: 4px;
        text-decoration: none;
        transition: background-color 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height: 28px;
    }
    
    .tree-action-btn:hover {
        background-color: rgba(0,0,0,0.1);
    }
    
    .tree-action-btn:disabled {
        opacity: 0.3;
        cursor: not-allowed;
    }
    
    .detail-btn:hover {
        background-color: rgba(33, 150, 243, 0.1);
    }
    
    .edit-btn:hover {
        background-color: rgba(255, 193, 7, 0.1);
    }
    
    .add-btn:hover {
        background-color: rgba(76, 175, 80, 0.1);
    }
    
    .delete-btn:hover:not(:disabled) {
        background-color: rgba(244, 67, 54, 0.1);
    }
    
    .tree-children {
        border-left: 2px solid #e0e0e0;
        margin-left: 1rem;
        overflow: hidden;
        transition: max-height 0.3s ease-out;
    }
    
    .tree-item.level-0 > .tree-children {
        border-left-color: #ff9800;
    }
    
    .tree-item.level-1 > .tree-children {
        border-left-color: #2196f3;
    }
    
    .tree-item.level-2 > .tree-children {
        border-left-color: #4caf50;
    }
    
    .no-categories-message {
        text-align: center;
        padding: 3rem;
        color: #666;
        background: #f8f9fa;
        border-radius: 8px;
        border: 2px dashed #dee2e6;
    }
    
    .no-data-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }
    
    /* „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú */
    @media (max-width: 768px) {
        .tree-node {
            padding: 0.5rem;
        }
        
        .tree-meta {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.25rem;
        }
        
        .tree-actions {
            opacity: 1;
        }
        
        .tree-action-btn {
            font-size: 1.1rem;
        }
    }
    
    /* „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ */
    @keyframes slideDown {
        from {
            max-height: 0;
            opacity: 0;
        }
        to {
            max-height: 1000px;
            opacity: 1;
        }
    }
    
    @keyframes slideUp {
        from {
            max-height: 1000px;
            opacity: 1;
        }
        to {
            max-height: 0;
            opacity: 0;
        }
    }
    
    .tree-children.expanding {
        animation: slideDown 0.3s ease-out;
    }
    
    .tree-children.collapsing {
        animation: slideUp 0.3s ease-out;
    }
</style>