@model Web.Essentials.App.ViewModels.Interfaces.ICategoryFormViewModel

<!-- カテゴリフォーム部分ビュー -->
<!-- Create/Edit画面で共通利用するカテゴリ入力フォーム -->
<div class="category-form-container">
    <!-- 基本情報セクション -->
    <div class="form-section">
        <h3 class="section-title">カテゴリ基本情報</h3>
        <div class="form-grid">
            <!-- カテゴリ名 -->
            <div class="form-group">
                <label asp-for="Name" class="form-label required">カテゴリ名</label>
                <input asp-for="Name" 
                       class="form-input" 
                       placeholder="カテゴリ名を入力してください"
                       maxlength="50"
                       autocomplete="off"
                       oninput="validateCategoryName(this)" />
                <span asp-validation-for="Name" class="validation-error"></span>
                <div id="categoryNameValidation" class="field-validation" style="display: none;"></div>
                <div class="field-help">
                    <small>最大50文字まで入力可能です</small>
                </div>
            </div>
        </div>
    </div>
    
    <!-- カテゴリ説明セクション -->
    <div class="form-section">
        <h3 class="section-title">カテゴリ説明</h3>
        <div class="form-group">
            <label asp-for="Description" class="form-label">カテゴリ説明</label>
            <textarea asp-for="Description" 
                      class="form-textarea" 
                      rows="4"
                      placeholder="カテゴリの説明を入力してください（任意）"
                      maxlength="500"
                      oninput="updateCharacterCount(this, 'categoryDescriptionCount')"></textarea>
            <span asp-validation-for="Description" class="validation-error"></span>
            <div class="character-count">
                <span id="categoryDescriptionCount">0</span> / 500文字
            </div>
            <div class="field-help">
                <small>このカテゴリに含まれる商品の種類や特徴を記載してください</small>
            </div>
        </div>
    </div>
    
    <!-- プレビューセクション -->
    <div class="form-section">
        <h3 class="section-title">プレビュー</h3>
        <div class="category-preview">
            <div class="preview-card">
                <div class="preview-header">
                    <h4 id="previewCategoryName" class="preview-name">カテゴリ名がここに表示されます</h4>
                </div>
                <div class="preview-body">
                    <p id="previewCategoryDescription" class="preview-description">カテゴリ説明がここに表示されます</p>
                </div>
                <div class="preview-footer">
                    <small class="preview-meta">作成日: @DateTime.Now.ToString("yyyy/MM/dd")</small>
                </div>
            </div>
        </div>
    </div>
    
    <!-- バリデーション結果表示エリア -->
    <div id="categoryFormValidationSummary" class="form-validation-summary" style="display: none;">
        <h4 class="validation-title">入力エラー</h4>
        <ul id="categoryValidationErrorList" class="validation-error-list">
            <!-- バリデーションエラーがここに表示される -->
        </ul>
    </div>
</div>

<!-- 重複チェック用のスクリプト -->
<script>
    // カテゴリ名のリアルタイムバリデーション
    let categoryNameCheckTimeout;
    
    function validateCategoryName(input) {
        // プレビュー更新
        updateCategoryPreview();
        
        // 重複チェック（デバウンス）
        clearTimeout(categoryNameCheckTimeout);
        categoryNameCheckTimeout = setTimeout(() => {
            checkCategoryNameDuplicate(input.value);
        }, 500);
    }
    
    // カテゴリ名重複チェック
    async function checkCategoryNameDuplicate(categoryName) {
        if (!categoryName || categoryName.trim() === '') {
            hideValidationMessage('categoryNameValidation');
            return;
        }
        
        try {
            @{
                object modelId = 0;
                try 
                {
                    var idProperty = Model.GetType().GetProperty("Id");
                    modelId = idProperty?.GetValue(Model) ?? 0;
                }
                catch
                {
                    modelId = 0;
                }
            }
            const excludeId = @modelId;
            const response = await fetch(`/api/category/check-duplicate?name=${encodeURIComponent(categoryName)}&excludeId=${excludeId}`);
            const result = await response.json();
            
            if (result.isDuplicate) {
                showValidationMessage('categoryNameValidation', 'このカテゴリ名は既に使用されています', 'error');
            } else {
                showValidationMessage('categoryNameValidation', 'このカテゴリ名は使用可能です', 'success');
            }
        } catch (error) {
            console.error('カテゴリ名重複チェックエラー:', error);
        }
    }
    
    // プレビュー更新
    function updateCategoryPreview() {
        const nameInput = document.querySelector('input[name="Name"]');
        const descriptionInput = document.querySelector('textarea[name="Description"]');
        
        const previewName = document.getElementById('previewCategoryName');
        const previewDescription = document.getElementById('previewCategoryDescription');
        
        if (nameInput && previewName) {
            previewName.textContent = nameInput.value || 'カテゴリ名がここに表示されます';
        }
        
        if (descriptionInput && previewDescription) {
            previewDescription.textContent = descriptionInput.value || 'カテゴリ説明がここに表示されます';
        }
    }
    
    // ページ読み込み時の初期化
    document.addEventListener('DOMContentLoaded', function() {
        updateCategoryPreview();
        
        // 説明文字数カウント初期化
        const descriptionInput = document.querySelector('textarea[name="Description"]');
        if (descriptionInput) {
            updateCharacterCount(descriptionInput, 'categoryDescriptionCount');
            descriptionInput.addEventListener('input', () => updateCategoryPreview());
        }
        
        // カテゴリ名変更時のプレビュー更新
        const nameInput = document.querySelector('input[name="Name"]');
        if (nameInput) {
            nameInput.addEventListener('input', () => updateCategoryPreview());
        }
    });
</script>